import java.io.*;
import java.util.*;
import java.util.LinkedList;
import java.util.Queue;


class Solution 
{
    static class CustomNode
    {
        Node node;
        int col;
        CustomNode(Node node, int col)
        {
            this.node=node;
            this.col=col;
        }
    }
    
    
    
    static ArrayList<Integer> topView(Node root) 
    {
        ArrayList<Integer>res=new ArrayList<>();
        if(root==null)
        {
            return res;
        }
        Queue<CustomNode>q=new LinkedList<>();
            q.offer(new CustomNode(root,0));
            TreeMap<Integer,Integer>map=new TreeMap<>();
            while(!q.isEmpty())
            {
               CustomNode customNode=q.poll();
               Node node=customNode.node;
               int col= customNode.col;
               if(!map.containsKey(col))
               {
                   map.put(col,node.data);
               }
               if(node.left!=null)
               {
                   q.offer(new CustomNode(node.left,col-1));
               }
                if(node.right!=null){
                   q.offer(new CustomNode(node.right,col+1));
               }
            }
    
    
            for(Map.Entry<Integer,Integer>entry : map.entrySet())
            {
                res.add(entry.getValue());
            }
    
        return res;
    }
}


class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

public class Tree {

    static Node buildTree(String str) {

        if (str.length() == 0 || str.charAt(0) == 'N') {
            return null;
        }

        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));


        Queue<Node> queue = new LinkedList<>();

        queue.add(root);

        int i = 1;
        while (queue.size() > 0 && i < ip.length) {

            Node currNode = queue.peek();
            queue.remove();

            String currVal = ip[i];

            if (!currVal.equals("N")) {

                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }

            i++;
            if (i >= ip.length) break;

            currVal = ip[i];

            // If the right child is not null
            if (!currVal.equals("N")) 
{

                currNode.right = new Node(Integer.parseInt(currVal));

                queue.add(currNode.right);
            }
            i++;
        }

        return root;
    }

    static void printInorder(Node root) {
        if (root == null) return;

        printInorder(root.left);
        System.out.print(root.data + " ");

        printInorder(root.right);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(br.readLine());

        while (t > 0) {
            String s = br.readLine();
            Node root = buildTree(s);

            Solution ob = new Solution();

            ArrayList<Integer> vec = ob.topView(root);
            for (int x : vec) System.out.print(x + " ");
            System.out.println();

            t--;
        }
    }
}
