import java.util.*;
import java.io.*;
import java.io.*;

public class Main
{
    public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		while(t-->0){
		    String inputLine[] = br.readLine().trim().split(" ");
		    int n = Integer.parseInt(inputLine[0]);
		    int m = Integer.parseInt(inputLine[1]);
		    long arr1[] = new long[n];
		    long arr2[] = new long[m];
		    inputLine = br.readLine().trim().split(" ");
		    for(int i=0; i<n; i++){
		        arr1[i] = Long.parseLong(inputLine[i]);
		    }
		    inputLine = br.readLine().trim().split(" ");
		    for(int i=0; i<m; i++){
		        arr2[i] = Long.parseLong(inputLine[i]);
		    }
		    Solution ob = new Solution();
		    ob.merge(arr1, arr2, n, m);
		    
		    StringBuffer str = new StringBuffer();
		    for(int i=0; i<n; i++){
		        str.append(arr1[i]+" ");
		    }
		    for(int i=0; i<m; i++){
		        str.append(arr2[i]+" ");
		    }
		    System.out.println(str);
		}
	}
}


class Solution
{
    public static void merge(long arr1[], long arr2[], int n, int m) 
    {
        // code here 
        int maxIdx1 = n-1;
        int count = 0;
        while (maxIdx1 >= 0 && arr1[maxIdx1] > arr2[0]) {
            maxIdx1--;
        }
        if (maxIdx1 == -1 || maxIdx1 < n-1) {
            count = 1;
            maxIdx1++;
            
            for (int i=1; i<m; i++) {
                long currEle = arr2[i];
                if (count == n) break;
                while (maxIdx1 < n - count) {
                    if (arr1[maxIdx1] > currEle) {
                        count++;
                        break;
                    }
                    maxIdx1++;
                }
            }
            int x = n-1;
            int y = 0;
            while (count > 0) {
                long temp = arr1[x];
                arr1[x] = arr2[y];
                arr2[y] = temp;
                x--;
                y++;
                count--;
            }
            Arrays.sort(arr1);
            Arrays.sort(arr2);
        }
    }
}
