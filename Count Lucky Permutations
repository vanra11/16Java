import java.util.*;

class Main {
    public int luckyPermutations(int N, int M, int[] arr, List<List<Integer>> graph) {
        boolean[][] adj = new boolean[N + 1][N + 1];
        for (List<Integer> edge : graph) {
            int u = edge.get(0);
            int v = edge.get(1);
            adj[u][v] = true;
            adj[v][u] = true;
        }

        int[][] dp = new int[N][1 << N];

        for (int i = 0; i < N; i++) {
            dp[i][1 << i] = 1;
        }

        for (int mask = 1; mask < (1 << N); mask++) {
            for (int u = 0; u < N; u++) {
                if ((mask & (1 << u)) == 0) continue;
                for (int v = 0; v < N; v++) {
                    if ((mask & (1 << v)) != 0 || !adj[arr[u]][arr[v]]) continue;
                    dp[v][mask | (1 << v)] += dp[u][mask];
                }
            }
        }

        int fullMask = (1 << N) - 1;
        int result = 0;
        for (int i = 0; i < N; i++) {
            result += dp[i][fullMask];
        }
        
        return result;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of nodes (N): ");
        int N = sc.nextInt();
        System.out.print("Enter the number of edges (M): ");
        int M = sc.nextInt();

        int[] arr = new int[N];
        System.out.println("Enter the array elements: ");
        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt();
        }

        List<List<Integer>> graph = new ArrayList<>();
        System.out.println("Enter the graph edges (u v): ");
        for (int i = 0; i < M; i++) {
            List<Integer> edge = new ArrayList<>();
            edge.add(sc.nextInt());
            edge.add(sc.nextInt());
            graph.add(edge);
        }

        Main sol = new Main();
        int result = sol.luckyPermutations(N, M, arr, graph);
        System.out.println("Number of lucky permutations: " + result);
        
        sc.close();
    }
}
