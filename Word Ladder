import java.util.*;
import java.lang.*;
import java.io.*;
class WordLadder
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            String[] wordList = new String[n];
            for(int i = 0; i < n; i++){
                wordList[i] = br.readLine().trim();
            }
            String startWord, targetWord;
            startWord = br.readLine().trim();
            targetWord = br.readLine().trim();
            Solution obj = new Solution();
            int ans = obj.wordLadderLength(startWord, targetWord, wordList);
            System.out.println(ans);
       }
    }
}

class BFSSearch
{
    public int wordLadderLength(String startWord, String targetWord, String[] wordList)
    {
        HashMap<String,Integer> map = new HashMap<>();
		HashSet<String> set = new HashSet<>();
		Queue<String> q = new LinkedList<>();
		for(int i=0;i<wordList.length;i++) {
			set.add(wordList[i]);
		}
		q.add(startWord);
		map.put(startWord, 0);
		if(set.contains(startWord)) {
			set.remove(startWord);
		}
		StringBuilder sb ;
		
		while(!q.isEmpty()) {
			String str = q.poll();

			String copy = str;
			for(int i=0;i<str.length();i++) {
				sb = new StringBuilder(copy);
				for(char j='a';j<='z';j++) {
					sb.setCharAt(i, j);
					String s = String.valueOf(sb);
					if(set.contains(s)) {
						q.add(s);
						set.remove(s);
						map.put(s, map.get(copy)+1);
					}
					if(map.containsKey(targetWord)) {
						
						return map.get(targetWord)+1;
					}
				}
			}
		}
		return 0;
    }
}
